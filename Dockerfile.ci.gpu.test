ARG cuda_tag

FROM nvidia/cuda:${cuda_tag}

ARG cuda_tag
RUN echo "building image based on nvidia/cuda:${cuda_tag}"

ARG ver_pytorch
RUN echo "version of pytorch: ${ver_pytorch}"
# ARG ver_torchvision
# RUN echo "version of torchvision: ${ver_torchvision}"

ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0+PTX"

ARG uid
ARG gid

# set work directory
WORKDIR /usr/src/app

# set environment variables
# to prevent generation of __pycache__ folders
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN apt-get update && \
    apt-get install -y build-essential curl libgtk-3-dev

# install dependencies for OTE-SDK
RUN apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev

COPY --from=openvino/ubuntu18_dev:2021.4 /opt/intel/openvino /opt/intel/openvino

RUN curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh
ENV PATH /opt/conda/bin:$PATH

RUN conda install -y python=3.8 cython
RUN conda install -y pytorch=$ver_pytorch torchvision cudatoolkit=$ver_cuda -c pytorch-lts -c nvidia && conda clean -ya

COPY ./requirements.txt .
COPY ./constraints.txt .
ENV FORCE_CUDA="1"
RUN pip install --upgrade pip
RUN pip install -r ./requirements.txt

ARG PYPI_PROTOCOL=http
ARG PYPI_SERVER=pypi.sclab.intel.com
ARG PYPI_PORT=8000
ARG PYTHON_PIP_NO_CACHE_DIR=

COPY ./tests /usr/src/app/tests
RUN mkdir -p .cache\pip && \
    pip download -d .cache/pip \
    --trusted-host ${PYPI_SERVER} \
    --extra-index-url ${PYPI_PROTOCOL}://${PYPI_SERVER}:${PYPI_PORT} \
    -r ./tests/requirements.txt && \
    pip ${PYTHON_PIP_NO_CACHE_DIR} install -f .cache/pip \
    --upgrade-strategy only-if-needed \
    --ignore-installed PyYAML \
    -r ./tests/requirements.txt

# install mmdetection
COPY ./external  /usr/src/app/external
RUN cd ./external/mmdetection/ && \
    pip install -r requirements/build.txt && \
    pip install -v -e . && \
    pip install -r requirements/runtime.txt && \
    cd -

# install mmsegmentation
RUN cd ./external/mmsegmentation/ && \
    pip install -r requirements.txt && \
    pip install -v -e . && \
    cd -

# install MDA
RUN pip install -v -e ./external/mda

# install HPO
RUN pip install -v -e ./external/hpo

# install ote-sdk
RUN pip install -v -e ./external/training_extensions/ote_sdk

ENV NO_PROXY=*.sclab.intel.com,*.devtools.intel.com,localhost,127.0.0.1
ENV HTTP_PROXY=http://proxy-mu.intel.com:911
ENV HTTPS_PROXY=http://proxy-mu.intel.com:912
ENV FTP_PROXY=http://proxy-mu.intel.com:911

RUN groupadd -r -g ${gid} mpa && useradd -r -m mpa -s /bin/bash -g ${gid} -u ${uid} && echo "${gid}:${uid}"
RUN chown -R mpa:mpa /usr/src/app

USER mpa

RUN echo "source /opt/intel/openvino/bin/setupvars.sh" >> /home/mpa/.bash_profile
ENV BASH_ENV "/home/mpa/.bash_profile"
ENV XDG_CACHE_HOME="/usr/src/app/data/.cache"